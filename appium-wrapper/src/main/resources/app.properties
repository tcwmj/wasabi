################################app properties#################################
#Appium server capabilities
#Which automation engine to use	Appium (default) or Selendroid
appium.automationName=Appium
#Which mobile OS platform to use	iOS, Android, or FirefoxOS
appium.platformName=Android
#Mobile OS version	e.g., 7.1, 4.4
appium.platformVersion=4.4
#The kind of mobile device or emulator to use	iPhone Simulator, iPad Simulator, iPhone Retina 4-inch, Android Emulator, Galaxy S4, etc¡­. On iOS, this should be one of the valid devices returned by instruments with instruments -s devices. On Android this capability is currently ignored, though it remains required.
appium.deviceName=192.168.103.101:5555
#The absolute local path or remote http URL to an .ipa or .apk file, or a .zip containing one of these. Appium will attempt to install this wrapper binary on the appropriate device first. Note that this capability is not required for Android if you specify appPackage and appActivity capabilities (see below). Incompatible with browserName.	/abs/path/to/my.apk or http://myapp.com/app.ipa
appium.app=D:/workspace/lombardrisk/AppiumSecondDay/app/youdaonote.apk
#Name of mobile wrapper browser to automate. Should be an empty string if automating an wrapper instead.	'Safari¡¯ for iOS and 'Chrome¡¯, 'Chromium¡¯, or 'Browser¡¯ for Android
appium.browserName=
#How long (in seconds) Appium will wait for a new command from the client before assuming the client quit and ending the session	e.g. 60
appium.newCommandTimeout=60
#(Sim/Emu-only) Language to set for the simulator / emulator	e.g. fr
appium.language=
#(Sim/Emu-only) Locale to set for the simulator / emulator	e.g. fr_CA
appium.locale=
#Unique device identifier of the connected physical device	e.g. 1ae203187fc012g
appium.udid=
#(Sim/Emu-only) start in a certain orientation	LANDSCAPE or PORTRAIT
appium.orientation=
#Move directly into Webview context. Default false	true, false
appium.autoWebview=false
#Don¡¯t reset wrapper state before this session. Default false	true, false
appium.noReset=false
#(iOS) Delete the entire simulator folder. (Android) Reset wrapper state by uninstalling wrapper instead of clearing wrapper data. On Android, this will also remove the wrapper after the session is complete. Default false	true, false
appium.fullReset=false
#Appium server capabilities ANDROID ONLY
#Activity name for the Android activity you want to launch from your package. This often needs to be preceded by a . (e.g., .MainActivity instead of MainActivity)	MainActivity, .Settings
android.appActivity=com.youdao.note.v4.MainActivity
#Java package of the Android wrapper you want to run	com.example.android.myApp, com.android.settings
android.appPackage=com.youdao.note
#Activity name for the Android activity you want to wait for	SplashActivity
android.appWaitActivity=
#Java package of the Android wrapper you want to wait for	com.example.android.myApp, com.android.settings
android.appWaitPackage=
#Timeout in seconds while waiting for device to become ready	5
android.deviceReadyTimeout=
#Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w	com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation
android.androidCoverage=
#(Chrome and webview only) Enable Chromedriver¡¯s performance logging (default false)	true, false
android.enablePerformanceLogging=false
#Timeout in seconds used to wait for a device to become ready after booting	e.g., 30
android.androidDeviceReadyTimeout=
#Port used to connect to the ADB server (default 5037)	5037
android.adbPort=
#Devtools socket name. Needed only when tested wrapper is a Chromium embedding browser. The socket is open by the browser and Chromedriver connects to it as a devtools client.	e.g., chrome_devtools_remote
android.androidDeviceSocket=
#Name of avd to launch	e.g., api19
android.avd=
#How long to wait in milliseconds for an avd to launch and connect to ADB (default 120000)	300000
android.avdLaunchTimeout=
#How long to wait in milliseconds for an avd to finish its boot animations (default 120000)	300000
android.avdReadyTimeout=
#Additional emulator arguments used when launching an avd	e.g., -netfast
android.avdArgs=
#Use a custom keystore to sign apks, default false	true or false
android.useKeystore=
#Path to custom keystore, default ~/.android/debug.keystore	e.g., /path/to.keystore
android.keystorePath=
#Password for custom keystore	e.g., foo
android.keystorePassword=
#Alias for key	e.g., androiddebugkey
android.keyAlias=
#Password for key	e.g., foo
android.keyPassword=
#The absolute local path to webdriver executable (if Chromium embedder provides its own webdriver, it should be used instead of original chromedriver bundled with Appium)	/abs/path/to/webdriver
android.chromedriverExecutable=
#Amount of time to wait for Webview context to become active, in ms. Defaults to 2000	e.g. 4
android.autoWebviewTimeout=
#Intent action which will be used to start activity (default android.intent.action.MAIN)	e.g.android.intent.action.MAIN, android.intent.action.VIEW
android.intentAction=
#Intent category which will be used to start activity (default android.intent.category.LAUNCHER)	e.g. android.intent.category.LAUNCHER, android.intent.category.APP_CONTACTS
android.intentCategory=
#Flags that will be used to start activity (default 0x10200000)	e.g. 0x10200000
android.intentFlags=
#Additional intent arguments that will be used to start activity. See Intent arguments	e.g. --esn <EXTRA_KEY>, --ez <EXTRA_KEY> <EXTRA_BOOLEAN_VALUE>, etc.
android.optionalIntentArguments=
#Doesn¡¯t stop the process of the wrapper under test, before starting the wrapper using adb. If the wrapper under test is created by another anchor wrapper, setting this false, allows the process of the anchor wrapper to be still alive, during the start of the test wrapper using adb. In other words, with dontStopAppOnReset set to true, we will not include the -S flag in the adb shell am start call. With this capability omitted or set to false, we include the -S flag. Default false	true or false
android.dontStopAppOnReset=
#Enable Unicode input, default false	true or false
android.unicodeKeyboard=
#Reset keyboard to its original state, after running Unicode tests with unicodeKeyboard capability. Ignored if used alone. Default false	true or false
android.resetKeyboard=
#Skip checking and signing of wrapper with debug keys, will work only with UiAutomator and not with selendroid, default false	true or false
android.noSign=
#Calls the setCompressedLayoutHierarchy() uiautomator function. This capability can speed up test execution, since Accessibility commands will run faster ignoring some elements. The ignored elements will not be findable, which is why this capability has also been implemented as a toggle-able setting as well as a capability. Defaults to false	true or false
android.ignoreUnimportantViews=
#Disables android watchers that watch for application not responding and application crash, this will reduce cpu usage on android device/emulator. This capability will work only with UiAutomator and not with selendroid, default false	true or false
android.disableAndroidWatchers=
#Allows passing chromeOptions capability for ChromeDriver. For more information see chromeOptions	chromeOptions: {args: ['--disable-popup-blocking']}
android.chromeOptions=
#Kill ChromeDriver session when moving to a non-ChromeDriver webview. Defaults to false	true or false
android.recreateChromeDriverSessions=
#In a wrapper context, use native (adb) method for taking a screenshot, rather than proxying to ChromeDriver. Defaults to false	true or false
android.nativeWebScreenshot=
#Appium server capabilities IOS ONLY
#(Sim-only) Calendar format to set for the iOS Simulator	e.g. gregorian
ios.calendarFormat=
#Bundle ID of the wrapper under test. Useful for starting an wrapper on a real device or for using other caps which require the bundle ID during test startup. To run a test on a real device using the bundle ID, you may omit the 'wrapper¡¯ capability, but you must provide 'udid¡¯.	e.g. io.appium.TestApp
ios.bundleId=
#Amount of time in ms to wait for instruments before assuming it hung and failing the session	e.g. 20000
ios.launchTimeout=
#(Sim-only) Force location services to be either on or off. Default is to keep current sim setting.	true or false
ios.locationServicesEnabled=
#(Sim-only) Set location services to be authorized or not authorized for wrapper via plist, so that location services alert doesn¡¯t pop up. Default is to keep current sim setting. Note that if you use this setting you MUST also use the bundleId capability to send in your wrapper¡¯s bundle ID.	true or false
ios.locationServicesAuthorized=
#Accept all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false.	true or false
ios.autoAcceptAlerts=
#Dismiss all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false.	true or false
ios.autoDismissAlerts=
#Use native intruments lib (ie disable instruments-without-delay).	true or false
ios.nativeInstrumentsLib=
#(Sim-only) Enable ¡°real¡±, non-javascript-based wrapper taps in Safari. Default: false. Warning: depending on viewport size/ratio this might not accurately tap an element	true or false
ios.nativeWebTap=
#(Sim-only) (>= 8.1) Initial safari url, default is a local welcome page	e.g. https://www.github.com
ios.safariInitialUrl=
#(Sim-only) Allow javascript to open new windows in Safari. Default keeps current sim setting	true or false
ios.safariAllowPopups=
#(Sim-only) Prevent Safari from showing a fraudulent website warning. Default keeps current sim setting.	true or false
ios.safariIgnoreFraudWarning=
#(Sim-only) Whether Safari should allow links to open in new windows. Default keeps current sim setting.	true or false
ios.safariOpenLinksInBackground=
#(Sim-only) Whether to keep keychains (Library/Keychains) when appium session is started/finished	true or false
ios.keepKeyChains=
#Where to look for localizable strings. Default en.lproj	en.lproj
ios.localizableStringsDir=
#Arguments to pass to the AUT using instruments	e.g., -myflag
ios.processArguments=
#The delay, in ms, between keystrokes sent to an element when typing.	e.g., 100
ios.interKeyDelay=
#Whether to show any logs captured from a device in the appium logs. Default false	true or false
ios.showIOSLog=
#strategy to use to type test into a test field. Simulator default: oneByOne. Real device default: grouped	oneByOne, grouped or setValue
ios.sendKeyStrategy=
#Max timeout in sec to wait for a screenshot to be generated. default: 10	e.g., 5
ios.screenshotWaitTimeout=
#The ios automation script used to determined if the wrapper has been launched, by default the system wait for the page source not to be empty. The result must be a boolean	e.g. true;, target.elements().length > 0;, $.delay(5000); true;
ios.waitForAppScript=
#Number of times to send connection message to remote debugger, to get webview. Default: 8	e.g., 12
ios.webviewConnectRetries=
#The display name of the application under test. Used to automate backgrounding the wrapper in iOS 9+.	e.g., UICatalog
ios.appName=